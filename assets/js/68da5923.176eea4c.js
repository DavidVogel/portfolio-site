"use strict";(self.webpackChunkportfolio_site=self.webpackChunkportfolio_site||[]).push([[4855],{66799:e=>{e.exports=JSON.parse('{"url":"redocusaurus/plugin-redoc-0.yaml","themeId":"theme-redoc","isSpecFile":true,"spec":{"x-generator":"NSwag v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))","openapi":"3.0.0","info":{"title":"Music Theory API","description":"\\n<div class=\'theme-admonition theme-admonition-info admonition_xJq3 alert alert--info\'><div class=\'admonitionHeading_Gvgb\'><span class=\'admonitionIcon_Rf37\'><svg viewBox=\'0 0 14 16\'><path fill-rule=\'evenodd\' d=\'M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\'></path></svg></span>info</div><div class=\'admonitionContent_BuS1\'><p>This section is under construction. Please check back later.</p></div></div>\\n\\n*Created by David Vogel*\\n\\n*Repo: [https://github.com/DavidVogel/MusicTheoryApi](https://github.com/DavidVogel/MusicTheoryApi)*\\n\\n*Base URL: [https://musictheoryapi.com](https://musictheoryapi.com)*\\n\\n# Introduction\\nThe Music Theory API is currently a toy project for me to both practice my developer skills and demonstrate technical writing knowledge around APIs, SaaS, DevOps, and InfoSec. However, in the coming months and years, I hope to turn it into something truly useful that can provide answers to a vast array of music theory questions, and will be able to generate working examples in standard formats such as MusicXML and MIDI.\\n\\nThe API currently provides minimal functionality for a few basic music theory questions, but since this is primarily a demonstration of technical writing at the moment, the documentation covers everything necessary for a development team to work on and support the API as well as how a client would consume it.\\n\\n**Currently, the API allows you to do the following**:\\n\\n* [Get the notes of a root-position chord (major, minor, augmented, or diminished)](#tag/Chords/operation/Chords_GetChord)\\n* [Get a few common chord progressions for a key (both Roman numerals and note spellings / pitch classes)](#tag/Progressions/operation/Progressions_GetCommonProgressions)\\n* [Get notes for a scale (major, minor, or harmonic minor)](#tag/Scales/operation/Scales_GetScaleNotes)\\n* [Get diatonic chords for a scale (major or minor)](#tag/Scales/operation/Scales_GetScaleChords)\\n\\n**Eventually, much more functionality will be added, including**:\\n* Output in MusicXML and MIDI formats\\n* More chord types (inversions, suspensions, 7th, 9th, 11th, 13th, etc.)\\n* More scales (whole tone, pentatonic, hexatonic, octatonic, modes, etc.)\\n* More progressions (circle of fifths, secondary dominants, etc.)\\n* More music theory concepts (counterpoint, voice leading, etc.)\\n# Documentation layout\\nThe reference documentation is generated from the [source code](https://github.com/DavidVogel/MusicTheoryApi) following the [OpenAPI 3.0 specification](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md) and is beautifully rendered using [redocusaurus](https://github.com/rohit-gohri/redocusaurus) (a [Redoc](https://github.com/redocly/redoc) wrapper for [Docusaurus](https://docusaurus.io/)).\\n\\n# Getting started\\nTo start using the API, you must [register using an email address and password](#tag/Auth/operation/Auth_Register).\\n\\nOnce registered, you can [obtain a JWT token](#tag/Auth/operation/Auth_Login) to make further requests.\\n\\n","license":{"name":"Elastic License 2.0","url":"https://www.elastic.co/licensing/elastic-license"},"version":"v0.0.1","x-logo":{"url":"/img/george-crumb-notation.jpg","altText":"Music Theory API Logo"}},"servers":[{"url":"https://localhost:7073"}],"paths":{"/api/v0/Auth/register":{"post":{"x-codeSamples":[{"lang":"curl","source":" curl --location \'https://musictheoryapi.com/api/v0/auth/register\' \\\\\\n --header \'Content-Type: application/json\' \\\\\\n --data-raw \'{\\n \\t\\"Email\\": \\"user@example.com\\",\\n \\t\\"Password\\": \\"StrongPassword123\\"\\n }\' "}],"tags":["Auth"],"summary":"Register a new user","description":"Sample request:\\n            \\n    curl --location \'https://musictheoryapi.com/api/v0/auth/register\' \\\\\\n    --header \'Content-Type: application/json\' \\\\\\n    --data-raw \'{\\n        \\"Email\\": \\"user@example.com\\",\\n        \\"Password\\": \\"MyStrongPassword123\\",\\n    }\'","operationId":"Auth_Register","requestBody":{"x-name":"model","description":"Registration model containing user details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterDto"}}},"required":true,"x-position":1},"responses":{"201":{"description":"The user was created successfully"},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}},"/api/v0/Auth/login":{"post":{"tags":["Auth"],"summary":"Get a JWT token for the user","description":"Sample request:\\n            \\n    curl --location \'https://musictheoryapi.com/api/v0/auth/login\' \\\\\\n    --header \'Content-Type: application/json\' \\\\\\n    --data-raw \'{\\n        \\"Email\\": \\"user@example.com\\",\\n        \\"Password\\": \\"MyStrongPassword123\\",\\n    }\'\\n            \\nSuccessful response:\\n            \\n    {\\n        \\"token\\": \\"xyz123abc456\\"\\n    }","operationId":"Auth_Login","requestBody":{"x-name":"model","description":"Login model containing user credentials","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginDto"}}},"required":true,"x-position":1},"responses":{"200":{"description":"Token generated successfully"},"401":{"description":"Not authorized; invalid credentials","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}},"/api/v0/Chords/{root}/{chordType}":{"get":{"tags":["Chords"],"summary":"Get the notes of a chord specified by root and type","operationId":"Chords_GetChord","parameters":[{"name":"root","in":"path","required":true,"description":"The root note of the chord (e.g. \\"D\\", \\"C-Sharp\\", \\"B-Flat\\")","schema":{"type":"string"},"x-position":1},{"name":"chordType","in":"path","required":true,"description":"The chord type (\\"Minor\\", \\"Major\\", \\"Diminished\\", or \\"Augmented\\")","schema":{"type":"string"},"x-position":2}],"responses":{"200":{"description":"Chord returned successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Chord"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}},"/api/v0/Progressions/{root}/{scaleType}/common":{"get":{"tags":["Progressions"],"summary":"Get common chord progressions for the specified key","operationId":"Progressions_GetCommonProgressions","parameters":[{"name":"root","in":"path","required":true,"description":"The root note of the key (e.g. \\"E\\", \\"D-Flat\\", \\"A-Sharp\\")","schema":{"type":"string"},"x-position":1},{"name":"scaleType","in":"path","required":true,"description":"The scale type of the key (\\"Minor\\" or \\"Major)","schema":{"type":"string"},"x-position":2}],"responses":{"200":{"description":"Returns a list of common chord progressions","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ChordProgression"}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}},"/api/v0/Scales/{root}/{scaleType}/notes":{"get":{"tags":["Scales"],"summary":"Get notes in a given scale","operationId":"Scales_GetScaleNotes","parameters":[{"name":"root","in":"path","required":true,"description":"The root note of the scale (e.g. \\"C\\", \\"G-Sharp\\", \\"B-Flat\\")","schema":{"type":"string"},"x-position":1},{"name":"scaleType","in":"path","required":true,"description":"The type of scale (e.g. \\"Major\\", \\"Minor\\", \\"HarmonicMinor\\")","schema":{"type":"string"},"x-position":2}],"responses":{"200":{"description":"Returns a list of notes in the scale","content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}},"/api/v0/Scales/{root}/{scaleType}/chords":{"get":{"tags":["Scales"],"summary":"Get diatonic chords in a given scale","operationId":"Scales_GetScaleChords","parameters":[{"name":"root","in":"path","required":true,"description":"The root note of the scale (e.g. \\"C\\", \\"F-Sharp\\", \\"A-Flat\\")","schema":{"type":"string"},"x-position":1},{"name":"scaleType","in":"path","required":true,"description":"The type of scale (\\"Major\\" or \\"Minor\\")","schema":{"type":"string"},"x-position":2}],"responses":{"200":{"description":"Returns a list of diatonic chords in the scale","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Chord"}}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProblemDetails"}}}}}}}},"components":{"schemas":{"ProblemDetails":{"type":"object","additionalProperties":{"nullable":true},"properties":{"type":{"type":"string","nullable":true},"title":{"type":"string","nullable":true},"status":{"type":"integer","format":"int32","nullable":true},"detail":{"type":"string","nullable":true},"instance":{"type":"string","nullable":true}}},"RegisterDto":{"type":"object","description":"Represents the data transfer object for user registration","additionalProperties":false,"required":["email","password"],"properties":{"email":{"type":"string","description":"User\'s email","minLength":1},"password":{"type":"string","description":"User\'s password","minLength":1}}},"LoginDto":{"type":"object","description":"Represents the data transfer object for user login","additionalProperties":false,"required":["email","password"],"properties":{"email":{"type":"string","description":"User\'s email","minLength":1},"password":{"type":"string","description":"User\'s password","minLength":1}}},"Chord":{"type":"object","description":"Represents a chord (triad only) with a root note and chord type","additionalProperties":false,"required":["root","type","notes"],"properties":{"root":{"description":"The root note of the chord (e.g., \\"C\\", \\"D-Sharp\\", \\"E-Flat\\", etc.)","oneOf":[{"$ref":"#/components/schemas/Note"}]},"type":{"description":"The type of chord (\\"Major\\", \\"Minor\\", \\"Diminished\\", or \\"Augmented\\")\\n            ","oneOf":[{"$ref":"#/components/schemas/ChordType"}]},"notes":{"type":"array","description":"The notes of the chord (triad) generated from the root and type","items":{"$ref":"#/components/schemas/Note"}}}},"Note":{"type":"object","description":"Represents a musical note (with letter name and accidental)","additionalProperties":false,"required":["name","accidental"],"properties":{"name":{"description":"The letter name of the note (A-G)","oneOf":[{"$ref":"#/components/schemas/NoteName"}]},"accidental":{"description":"The accidental of the note (\\"Sharp\\", \\"Flat\\", \\"Natural\\", \\"DoubleSharp\\", or \\"DoubleFlat\\")","oneOf":[{"$ref":"#/components/schemas/Accidental"}]},"pitchClass":{"type":"integer","description":"The pitch class (0-11) of this note (ignoring octave)","format":"int32"}}},"NoteName":{"type":"string","description":"Natural note names A through G","x-enumNames":["A","B","C","D","E","F","G"],"enum":["A","B","C","D","E","F","G"]},"Accidental":{"type":"string","description":"Accidental offsets applied to a note","x-enumNames":["Natural","Sharp","DoubleSharp","DoubleFlat","Flat"],"enum":["Natural","Sharp","DoubleSharp","DoubleFlat","Flat"]},"ChordType":{"type":"string","description":"Types of triad chords","x-enumNames":["Major","Minor","Diminished","Augmented"],"enum":["Major","Minor","Diminished","Augmented"]},"ChordProgression":{"type":"object","description":"Represents a chord progression in a given key","additionalProperties":false,"required":["pattern","chords"],"properties":{"pattern":{"type":"string","description":"The pattern of the chord progression, e.g., \\"I-IV-V\\" or \\"i-iv-v\\".","minLength":1},"chords":{"type":"array","description":"The chords in the progression, represented as a list of Chord objects","items":{"$ref":"#/components/schemas/Chord"}}}}}},"tags":[{"name":"registerdto_model","x-displayName":"The User Registration Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/RegisterDto\\" />"},{"name":"logindto_model","x-displayName":"The User Login Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/LoginDto\\" />"},{"name":"chord_model","x-displayName":"The Chord Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/Chord\\" />"},{"name":"note_model","x-displayName":"The Note Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/Note\\" />"},{"name":"notename_model","x-displayName":"The Note Name Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/NoteName\\" />"},{"name":"chordtype_model","x-displayName":"The Chord Type Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/ChordType\\" />"},{"name":"chord_progression_model","x-displayName":"The Chord Progression Model","description":"<SchemaDefinition schemaRef=\\"#/components/schemas/ChordProgression\\" />"}],"x-tagGroups":[{"name":"Controllers","tags":["Auth","Chords","Progressions","Scales"]},{"name":"Models","tags":["registerdto_model","logindto_model","chord_model","note_model","notename_model","chordtype_model","chord_progression_model"]}]}}')}}]);